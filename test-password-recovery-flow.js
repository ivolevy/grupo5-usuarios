#!/usr/bin/env node

/**
 * Script de prueba para el flujo completo de recuperaci√≥n de contrase√±a
 * 
 * Este script prueba:
 * 1. Solicitar c√≥digo de verificaci√≥n (forgot-password)
 * 2. Verificar el c√≥digo (verify-code)
 * 3. Resetear la contrase√±a (reset-password)
 */

const BASE_URL = 'http://localhost:3000/api/auth';

// Email de prueba (debe existir en la base de datos)
const TEST_EMAIL = 'test@example.com';

async function makeRequest(endpoint, data) {
  try {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    });

    const result = await response.json();
    
    console.log(`\nüì° ${endpoint}:`);
    console.log(`   Status: ${response.status}`);
    console.log(`   Response:`, JSON.stringify(result, null, 2));
    
    return { success: response.ok, data: result, status: response.status };
  } catch (error) {
    console.error(`‚ùå Error en ${endpoint}:`, error.message);
    return { success: false, error: error.message };
  }
}

async function testPasswordRecoveryFlow() {
  console.log('üöÄ Iniciando prueba del flujo de recuperaci√≥n de contrase√±a');
  console.log('=' .repeat(60));
  
  // Paso 1: Solicitar c√≥digo de verificaci√≥n
  console.log('\n1Ô∏è‚É£ Paso 1: Solicitar c√≥digo de verificaci√≥n');
  const forgotResult = await makeRequest('/forgot', {
    email: TEST_EMAIL
  });
  
  if (!forgotResult.success) {
    console.error('‚ùå Fall√≥ la solicitud de c√≥digo de verificaci√≥n');
    return;
  }
  
  // En modo desarrollo, el c√≥digo se muestra en la consola
  console.log('\nüìß En modo desarrollo, revisa la consola del servidor para ver el c√≥digo generado');
  console.log('   O revisa los logs para encontrar el c√≥digo de verificaci√≥n');
  
  // Paso 2: Simular verificaci√≥n de c√≥digo
  console.log('\n2Ô∏è‚É£ Paso 2: Verificar c√≥digo (simulado)');
  console.log('   Para probar completamente, necesitas:');
  console.log('   1. Revisar los logs del servidor para obtener el c√≥digo');
  console.log('   2. Usar el endpoint /verify-code con el c√≥digo real');
  console.log('   3. Usar el token devuelto para resetear la contrase√±a');
  
  // Ejemplo de c√≥mo ser√≠a la verificaci√≥n (con c√≥digo simulado)
  const simulatedCode = '123456';
  const verifyResult = await makeRequest('/verify-code', {
    email: TEST_EMAIL,
    code: simulatedCode
  });
  
  if (!verifyResult.success) {
    console.log('   ‚ö†Ô∏è  Esto es esperado con un c√≥digo simulado');
  }
  
  // Paso 3: Simular reset de contrase√±a
  console.log('\n3Ô∏è‚É£ Paso 3: Reset de contrase√±a (simulado)');
  console.log('   Para probar completamente, necesitas:');
  console.log('   1. Un token v√°lido del paso de verificaci√≥n');
  console.log('   2. Una nueva contrase√±a que cumpla los requisitos');
  
  const resetResult = await makeRequest('/reset', {
    token: 'simulated-token',
    password: 'NewPassword123!'
  });
  
  if (!resetResult.success) {
    console.log('   ‚ö†Ô∏è  Esto es esperado con un token simulado');
  }
  
  console.log('\n‚úÖ Prueba completada');
  console.log('\nüìã Para probar completamente:');
  console.log('   1. Aseg√∫rate de que el servidor est√© corriendo');
  console.log('   2. Configura las variables de entorno GMAIL_USER y GMAIL_APP_PASSWORD');
  console.log('   3. Usa un email que exista en la base de datos');
  console.log('   4. Revisa los logs del servidor para obtener el c√≥digo real');
  console.log('   5. Usa el c√≥digo real para completar el flujo');
}

// Ejecutar la prueba
testPasswordRecoveryFlow().catch(console.error);
