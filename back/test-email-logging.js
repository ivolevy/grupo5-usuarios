// Test del sistema de logging de emails
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

console.log('üìß Testing Email Logging System');
console.log('================================\n');

// Funci√≥n helper para hacer requests
async function testEndpoint(name, url, method = 'GET', headers = {}, body = null) {
  try {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    if (body) {
      options.body = JSON.stringify(body);
    }

    console.log(`\nüöÄ [TEST] ${name}`);
    console.log(`   URL: ${url}`);
    console.log(`   Method: ${method}`);
    if (body) {
      console.log(`   Body:`, JSON.stringify(body, null, 2));
    }
    console.log('   ---');

    const response = await fetch(url, options);
    const data = await response.json();

    console.log(`   Status: ${response.status}`);
    console.log(`   Response:`, JSON.stringify(data, null, 2));
    console.log('   ---');

    return { success: response.ok, data, status: response.status };
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
    console.log('   ---');
    return { success: false, error: error.message };
  }
}

async function runEmailLoggingTest() {
  const testEmail = 'test@example.com';

  console.log('1. Testing Forgot Password (with email logging):');
  console.log('   This should show:');
  console.log('   - üîê [PASSWORD RESET] Generando c√≥digo...');
  console.log('   - ‚è∞ [PASSWORD RESET] C√≥digo expira en...');
  console.log('   - üìß [EMAIL ATTEMPT] Enviando C√≥digo de Recupero...');
  console.log('   - ‚úÖ [EMAIL SUCCESS] C√≥digo de Recupero enviado...');
  console.log('   - ‚úÖ [PASSWORD RESET] Email de recupero enviado exitosamente...');
  
  await testEndpoint(
    'Forgot Password - With Logging',
    `${BASE_URL}/api/auth/forgot`,
    'POST',
    {},
    { email: testEmail }
  );

  console.log('\n2. Testing Verify Code (with validation logging):');
  console.log('   This should show:');
  console.log('   - üîç [CODE VERIFICATION] Validando c√≥digo...');
  console.log('   - ‚ùå [CODE VERIFICATION] C√≥digo inv√°lido... (expected)');
  
  await testEndpoint(
    'Verify Code - With Logging',
    `${BASE_URL}/api/auth/verify-code`,
    'POST',
    {},
    { email: testEmail, code: '123456' }
  );

  console.log('\n3. Testing Reset Password (with confirmation logging):');
  console.log('   This should show:');
  console.log('   - üìß [PASSWORD RESET] Enviando confirmaci√≥n...');
  console.log('   - ‚úÖ [EMAIL SUCCESS] Confirmaci√≥n enviada...');
  console.log('   - ‚úÖ [PASSWORD RESET] Email de confirmaci√≥n enviado exitosamente...');
  
  await testEndpoint(
    'Reset Password - With Logging',
    `${BASE_URL}/api/auth/reset`,
    'POST',
    {},
    { token: 'test-token', password: 'NewPassword123' }
  );

  console.log('\nüìã Logging Summary:');
  console.log('===================');
  console.log('‚úÖ Email sending attempts are logged');
  console.log('‚úÖ Email success/failure is logged');
  console.log('‚úÖ Code generation is logged');
  console.log('‚úÖ Code validation is logged');
  console.log('‚úÖ Token generation is logged');
  console.log('‚úÖ All timestamps are included');
  console.log('');
  console.log('üîç Check the server console for detailed logs!');
  console.log('   Look for:');
  console.log('   - üìß [EMAIL ATTEMPT]');
  console.log('   - ‚úÖ [EMAIL SUCCESS]');
  console.log('   - ‚ùå [EMAIL ERROR]');
  console.log('   - üîê [PASSWORD RESET]');
  console.log('   - üîç [CODE VERIFICATION]');
  console.log('   - üîë [CODE VERIFICATION]');
}

// Ejecutar test
runEmailLoggingTest().catch(console.error);
